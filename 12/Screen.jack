// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static boolean color;
	static Array bitMasks;

    /** Initializes the Screen. */
    function void init() {
    	let bitMasks = Array.new(16);
    	let bitMasks[0] = 1;
    	let bitMasks[1] = 2;
    	let bitMasks[2] = 4;
    	let bitMasks[3] = 8;
    	let bitMasks[4] = 16;
    	let bitMasks[5] = 32;
    	let bitMasks[6] = 64;
    	let bitMasks[7] = 128;
    	let bitMasks[8] = 256;
    	let bitMasks[9] = 512;
    	let bitMasks[10] = 1024;
    	let bitMasks[11] = 2048;
    	let bitMasks[12] = 4096;
    	let bitMasks[13] = 8192;
    	let bitMasks[14] = 16384;
    	let bitMasks[15] = 16384 + 16384;
    	let color = true;
    	return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
    	var int i, j;
    	let color = false;
    	let i = 0;
    	while (i < 512) {
    		let j = 0;
    		while (j < 256) {
    			do Screen.drawPixel(i, j);
    			let j = j + 1;
    		}
    		let i = i + 1;
    	}
    	let color = true;
    	return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
    	let color = b;
    	return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
    	var int address, bit, div16;
    	if ((x < 0) | (x > 511)) {
    		do Sys.error(7);
    	}
    	if ((y < 0) | (y > 255)) {
    		do Sys.error(7);
    	}
    	let div16 = x / 16;
    	let address = 16384 + (y * 32) + div16;
    	let bit = x - (div16 * 16);
    	if (color) {
    		do Memory.poke(address, Memory.peek(address) | bitMasks[bit]);
    	}
    	else {
    		do Memory.poke(address, Memory.peek(address) & (~bitMasks[bit]));
    	}
    	return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        if((x1 < 0) | (x1 > 511)) {
      		do Sys.error(8);
    	}
    	if((x2 < 0) | (x2 > 511)) {
      		do Sys.error(8);
    	}
    	if((y1 < 0) | (y1 > 255)) {
      		do Sys.error(8);
    	}
    	if((y2 < 0) | (y2 > 255)) {
      		do Sys.error(8);
    	}
    	if (x1 = x2) {
    		do Screen.drawVerticalLine(x1, Math.min(y1, y2), Math.max(y1, y2));
    		return;
    	}
    	if (y1 = y2) {
    		do Screen.drawHorizontalLine(y1, Math.min(x1, x2), Math.max(x1, x2));
    		return;
    	}
    	if ((x1 < x2) & (y1 < y2)) {
    		do Screen.drawPosSlopeLine(x1, y1, x2 - x1, y2 - y1);
    		return;
    	}
    	if ((x1 > x2) & (y1 > y2)) {
    		do Screen.drawPosSlopeLine(x2, y2, x1 - x2, y1 - y2);
    		return;
    	}
    	if ((x1 < x2) & (y1 > y2)) {
    		do Screen.drawNegSlopeLine(x1, y1, x2 - x1, y2 - y1);
    		return;
    	}
    	if ((x1 > x2) & (y1 < y2)) {
    		do Screen.drawNegSlopeLine(x2, y2, x1 - x2, y1 - y2);
    		return;
    	}
    	return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
    	do Screen.drawPixel(x, y1);
    	while (y1 < y2) {
    		let y1 = y1 + 1;
    		do Screen.drawPixel(x, y1);
    	}
    	return;
    }

    function void drawHorizontalLine(int y, int x1, int x2) {
    	do Screen.drawPixel(x1, y);
    	while (x1 < x2) {
    		let x1 = x1 + 1;
    		do Screen.drawPixel(x1, y);
    	}
    	return;
    }

    function void drawPosSlopeLine(int x, int y, int dx, int dy) {
    	var int a, b, d;
    	let a = 0;
    	let b = 0;
    	let d = 0;
    	do Screen.drawPixel(x, y);
    	while ((a < dx) & (b < dy)) {
    		if (d > 0) {
    			let a = a + 1;
    			let d = d - dy;
    		}
    		else {
    			let b = b + 1;
    			let d = d + dx;
    		}
    		do Screen.drawPixel(x + a, y + b);
    	}
    	return;
    }

    function void drawNegSlopeLine(int x, int y, int dx, int dy) {
    	var int a, b, d;
    	let a = 0;
    	let b = 0;
    	let d = 0;
    	do Screen.drawPixel(x, y);
    	while ((a < dx) & (b > dy)) {
    		if (d < 0) {
    			let a = a + 1;
    			let d = d - dy;
    		}
    		else {
    			let b = b - 1;
    			let d = d - dx;
    		}
    		do Screen.drawPixel(x + a, y + b);
    	}
    	return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        if((x1 < 0) | (x1 > 511)) {
      		do Sys.error(9);
    	}
    	if((x2 < 0) | (x2 > 511)) {
      		do Sys.error(9);
    	}
    	if((y1 < 0) | (y1 > 255)) {
      		do Sys.error(9);
    	}
    	if((y2 < 0) | (y2 > 255)) {
      		do Sys.error(9);
    	}
    	if((x1 > x2) | (y1 > y2)) {
      		do Sys.error(9);
    	}
    	do Screen.drawVerticalLine(x1, y1, y2);
    	while (x1 < x2) {
    		let x1 = x1 + 1;
    		do Screen.drawVerticalLine(x1, y1, y2);
    	}
    	return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    	var int h, a, yCurrent;
     	if((x < 0) | (x > 511)) {
      		do Sys.error(12);
    	}
    	if((y < 0) | (y > 255)) {
      		do Sys.error(12);
    	}
    	if((r < 0) | (r > 181)) {
      		do Sys.error(13);
    	}
    	let yCurrent = Math.max(0, y - r);
    	while ((yCurrent < 256) & (yCurrent < (y + r + 1))) {
    		let h = Math.abs(y - yCurrent);
    		let a = Math.sqrt((r * r) - (h * h));
    		do Screen.drawHorizontalLine(yCurrent, Math.max(0, x - a), Math.min(511, x + a));
    		let yCurrent = yCurrent + 1;
    	}
    	return;
    }
}
